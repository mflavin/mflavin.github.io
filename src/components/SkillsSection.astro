---
import { Image } from "astro:assets";

import AstroSvg from "public/images/astro.svg";
import AwsSvg from "public/images/aws.svg";
import CssSvg from "public/images/css.svg";
import CypressSvg from "public/images/cypress.svg";
import DjangoSvg from "public/images/django.svg";
import FirebaseSvg from "public/images/firebase.svg";
import GraphqlSvg from "public/images/graphql.svg";
import Html5Svg from "public/images/html.svg";
import JavascriptSvg from "public/images/javascript.svg";
import JestSnapshotSvg from "public/images/jest.svg";
import MysqlSvg from "public/images/mysql.svg";
import NodejsSvg from "public/images/nodejs.svg";
import NuxtSvg from "public/images/nuxt.svg";
import PythonSvg from "public/images/python.svg";
import SupabaseSvg from "public/images/supabase.svg";
import TailwindcssSvg from "public/images/tailwindcss.svg";
import TypescriptSvg from "public/images/typescript.svg";
import VitestSvg from "public/images/vitest.svg";
import VueSvg from "public/images/vue.svg";
import VuetifySvg from "public/images/vuetify.svg";

const icons = [
  // Languages
  VueSvg,
  TypescriptSvg,
  JavascriptSvg,
  NodejsSvg,
  PythonSvg,
  DjangoSvg,
  NuxtSvg,
  AstroSvg,

  // Styling
  Html5Svg,
  CssSvg,
  TailwindcssSvg,
  VuetifySvg,

  // Databases
  GraphqlSvg,
  AwsSvg,
  FirebaseSvg,
  SupabaseSvg,
  MysqlSvg,

  // Testing
  VitestSvg,
  JestSnapshotSvg,
  CypressSvg,
];
---

<section>
  <h2 class="mb-6 text-2xl">Skills</h2>
  <ul class="flex flex-wrap gap-2">
    {
      icons.map((SvgName) => (
        <li class="icon-wrapper group relative touch-manipulation select-none">
          <SvgName height="40" width="40" class="hover:scale-110 size-10" />
          <div class="tooltip absolute bottom-full mb-2 hidden whitespace-nowrap rounded bg-gray-800 px-2 py-1 text-xs capitalize text-white group-hover:block">
            {SvgName.src
              ? (SvgName.src.split("/").pop()?.split(".")[0] ?? "")
              : ""}
          </div>
        </li>
      ))
    }
  </ul>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const wrappers = document.querySelectorAll<HTMLDivElement>(".icon-wrapper");

    wrappers.forEach((wrapper) => {
      const icon = wrapper.firstElementChild as HTMLElement | null;
      if (icon) {
        // Listen for mouse events
        icon.addEventListener("mouseenter", toggleTooltip);
        icon.addEventListener("mouseleave", toggleTooltip);
        // Listen for touch events / mobile
        icon.addEventListener("touchstart", toggleTooltip);
        icon.addEventListener("touchend", toggleTooltip);
      }
    });

    function toggleTooltip(event: Event) {
      const target = event.currentTarget as HTMLElement;
      const tooltip =
        target.parentElement?.querySelector<HTMLDivElement>(".tooltip");
      if (tooltip) {
        // Toggle tooltip visibility
        tooltip.style.display =
          tooltip.style.display === "block" ? "none" : "block";

        // If tooltip is shown and too close to the right edge, move it to the left
        const tooltipRect = tooltip.getBoundingClientRect();
        if (tooltipRect.right > window.innerWidth) {
          tooltip.style.right = "0";
          tooltip.style.left = "auto";
        } else {
          tooltip.style.right = "auto";
          tooltip.style.left = "0";
        }

        // Hide all other tooltips
        wrappers.forEach((wrapper) => {
          const otherTooltip =
            wrapper.querySelector<HTMLDivElement>(".tooltip");
          if (wrapper.firstElementChild !== target && otherTooltip) {
            otherTooltip.style.display = "none";
          }
        });
      }
    }
  });
</script>
